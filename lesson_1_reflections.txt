How did viewing a diff between two versions of a file help you see the bug that
was introduced?

diff gives me the information about the different lines between two files so I can focus my attention on a small number of lines to search for bugs. 

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

Many times we are first to write a program which can run but slow. When we try to optimize the program, it is nessesary to guarantee that the output of new version program is the same as before.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

Manually choose when to create a commit can guarantee the logical correctness of each version, but sometimes it takes for a long time to commit once. Having versions automatically saved can't gurantee the logical correctness of each version, but prevent files loss.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

I don't know.

How can you use the commands git log and git diff to view the history of files?

The command git log tells me the entire commit history. The command git diff enables me to compare two history versions.

How might using version control make you more confident to make changes that
could break something?

When I make changes that break something, I can check out the history version to recover the correct version.

Now that you have your workspace set up, what do you want to try using Git for?

Write my own project.
